<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:component="com.ylsoft.component.*"
		  xmlns:s="library://ns.adobe.com/flex/spark"  creationComplete="init()"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.hurlant.crypto.symmetric.NullPad;
			import com.ylsoft.common.ColorLabel;
			import com.ylsoft.common.Message;
			import com.ylsoft.common.Pagelimit;
			import com.ylsoft.common.XWindow;
			import com.ylsoft.component.Buissnesser_List;
			import com.ylsoft.component.DG_Window;
			import com.ylsoft.component.special.MergeServersChooser;
			import com.ylsoft.core.Amf;
			import com.ylsoft.core.AppConfig;
			import com.ylsoft.core.EventDelegate;
			import com.ylsoft.core.ModuleFactory;
			import com.ylsoft.core.ModuleGlobal;
			import com.ylsoft.core.UIProgressBar;
			import com.ylsoft.event.AppEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.messaging.AbstractConsumer;
			
			import ronco.bbxq.ObjAni;
			
			import spark.components.gridClasses.GridColumn;
			private var amf:Amf;
			private var seriesAmf:Amf;
			private var versionAmf:Amf;
			private var cversionAmf:Amf;
			private var updateAmf:Amf;
			private var cupdateAmf:Amf;
			private var rollbackAmf:Amf;
			private var columsInited:Boolean;
			private var buissnesser:Object = new Object;
			private var operated_serverids : ArrayCollection = new ArrayCollection();
			private var updateWindow : DG_Window ;
			private var rollbackWindow : DG_Window;
			private var mergeWindow: MergeServersChooser;
			
			private function init():void{
				//禁用返回列表
				FlexGlobals.topLevelApplication.form_return.enabled=false;
				initColumns();
				amf = new Amf();
				amf.registerCallBack(initDataGrid);
				amf.startService('serverToolService','lists',new Pagelimit(0,AppConfig.PAGECOUNT));
				sb.is_total_exec = false;
				initSubpage();
				
				
				this.cb_series.dataProvider =  new ArrayCollection([
					{name:'全部',value:''}
				]);
				this.cb_series.labelField = 'name';
				this.cb_series.rowCount = 25;
				
				this.cb_version.labelField = 'version';
				this.cb_version.rowCount = 25;
				this.cb_cversion.labelField='version';
				this.cb_cversion.rowCount = 25;
				
			    seriesAmf = new Amf;
				seriesAmf.registerCallBack(setSeries);
				seriesAmf.startService('gameSeriesService','listsNoPage');
				
				this.cd.dg.addEventListener(ListEvent.ITEM_CLICK,checkbtnStat);
				this.cd.dg.addEventListener(AppEvent.CHKDATAGRID_CHECKED_ALL_CLICK,checkbtnStat);//checkbox datagrid的顶部checkbox的点击事件
				this.disabledBtnGroupInit();
			}
			
			public function disabledBtnGroupInit():void{
				(this.lb.getChildAt(1) as LinkButton).enabled = false;
				(this.lb.getChildAt(4) as LinkButton).enabled = false;
				(this.lb.getChildAt(5) as LinkButton).enabled = false;
				(this.lb.getChildAt(6) as LinkButton).enabled = false;
				(this.lb.getChildAt(7) as LinkButton).enabled = false;
				(this.lb.getChildAt(2) as LinkButton).enabled = false;
				(this.lb.getChildAt(3) as LinkButton).enabled = false;
				(this.lb.getChildAt(8) as LinkButton).enabled = false;
			}
			
			private function checkbtnStat(evt:*):void{
					var is_open_exsit : Boolean = false;
					var is_close_exsit : Boolean = false;
					var is_unarivable : Boolean = false;
					for each(var item:Object in this.cd.selecteditems){//判断单项操作的可行性
						if(item.stat == '开启'){
							is_open_exsit = true;
						}
						else if(item.stat == '关闭'){
							is_close_exsit = true;
						}
						else{
							is_unarivable = true;
						}
					}
					
					if(this.cd.selecteditems != null && this.cd.selecteditems.length > 1){//判断批量操作可行性
						(this.lb.getChildAt(6) as LinkButton).enabled = false;
						(this.lb.getChildAt(7) as LinkButton).enabled = false;
						(this.lb.getChildAt(1) as LinkButton).enabled = false;
						(this.lb.getChildAt(3) as LinkButton).enabled = false;
						(this.lb.getChildAt(5) as LinkButton).enabled = false;
						(this.lb.getChildAt(4) as LinkButton).enabled = false;
						(this.lb.getChildAt(8) as LinkButton).enabled = false;
					}else{
						(this.lb.getChildAt(6) as LinkButton).enabled = true;
						(this.lb.getChildAt(7) as LinkButton).enabled = true;
						(this.lb.getChildAt(1) as LinkButton).enabled = true;
						(this.lb.getChildAt(3) as LinkButton).enabled = true;
						(this.lb.getChildAt(5) as LinkButton).enabled = true;
						(this.lb.getChildAt(4) as LinkButton).enabled = true;
						(this.lb.getChildAt(8) as LinkButton).enabled = true;
					}
					
					//判断单个操作
					if(is_open_exsit && is_close_exsit && !is_unarivable){
						(this.lb.getChildAt(1) as LinkButton).enabled = false;
						(this.lb.getChildAt(4) as LinkButton).enabled = false;
						(this.lb.getChildAt(5) as LinkButton).enabled = false;
						(this.lb.getChildAt(6) as LinkButton).enabled = false;
						(this.lb.getChildAt(7) as LinkButton).enabled = false;
						(this.lb.getChildAt(2) as LinkButton).enabled = false;
						(this.lb.getChildAt(3) as LinkButton).enabled = false;
						(this.lb.getChildAt(8) as LinkButton).enabled = false;
					}
					else if(is_open_exsit && !is_close_exsit && !is_unarivable){
						if(this.cd.selecteditems.length > 1){
							(this.lb.getChildAt(3) as LinkButton).enabled = false;
						}else{
							(this.lb.getChildAt(3) as LinkButton).enabled = true;
						}
						(this.lb.getChildAt(1) as LinkButton).enabled = false;
						(this.lb.getChildAt(5) as LinkButton).enabled = false;
						(this.lb.getChildAt(6) as LinkButton).enabled = false;
						(this.lb.getChildAt(7) as LinkButton).enabled = false;
						(this.lb.getChildAt(4) as LinkButton).enabled = false;
						(this.lb.getChildAt(8) as LinkButton).enabled = false;
						(this.lb.getChildAt(2) as LinkButton).enabled = true;
						
					}else if(!is_open_exsit && is_close_exsit && !is_unarivable){
						if(this.cd.selecteditems.length > 1){
							(this.lb.getChildAt(1) as LinkButton).enabled = false;
							(this.lb.getChildAt(5) as LinkButton).enabled = false;
							(this.lb.getChildAt(6) as LinkButton).enabled = false;
							(this.lb.getChildAt(7) as LinkButton).enabled = false;
							(this.lb.getChildAt(4) as LinkButton).enabled = false;
							(this.lb.getChildAt(8) as LinkButton).enabled = false;
						}else{
							(this.lb.getChildAt(1) as LinkButton).enabled = true;
							(this.lb.getChildAt(5) as LinkButton).enabled = true;
							(this.lb.getChildAt(6) as LinkButton).enabled = true;
							(this.lb.getChildAt(7) as LinkButton).enabled = true;
							(this.lb.getChildAt(4) as LinkButton).enabled = true;
							(this.lb.getChildAt(8) as LinkButton).enabled = true;
						}
						
						(this.lb.getChildAt(2) as LinkButton).enabled = false;
						(this.lb.getChildAt(3) as LinkButton).enabled = false;
					}else{
						(this.lb.getChildAt(1) as LinkButton).enabled = false;
						(this.lb.getChildAt(4) as LinkButton).enabled = false;
						(this.lb.getChildAt(5) as LinkButton).enabled = false;
						(this.lb.getChildAt(6) as LinkButton).enabled = false;
						(this.lb.getChildAt(7) as LinkButton).enabled = false;
						(this.lb.getChildAt(2) as LinkButton).enabled = false;
						(this.lb.getChildAt(3) as LinkButton).enabled = false;
						(this.lb.getChildAt(8) as LinkButton).enabled = false;
					}
			}
			
			
			private function setSeries(evt:AppEvent):void{
					this.cb_series.dataProvider = new ArrayCollection(seriesAmf.getResult() as Array);
					(this.cb_series.dataProvider as ArrayCollection).addItemAt({name:'全部',id:''},0);
					this.cb_series.selectedIndex = 0;
			}
			
			private function setVersion(evt:AppEvent):void{
				   this.cb_version.dataProvider = new ArrayCollection(versionAmf.getResult() as Array);
				   (this.cb_version.dataProvider as ArrayCollection).addItemAt({version:'全部',id:''},0);
				   this.cb_version.selectedIndex = 0;
			}
			
			private function setCVersion(evt:AppEvent):void{
				this.cb_cversion.dataProvider = new ArrayCollection(cversionAmf.getResult() as Array);
				(this.cb_cversion.dataProvider as ArrayCollection).addItemAt({version:'全部',id:''},0);
				this.cb_cversion.selectedIndex = 0;
			}
			
			private function loadversions():void{
						var _series : int = this.cb_series.selectedItem.id;
						versionAmf = new Amf;
						versionAmf.registerCallBack(setVersion);
						versionAmf.startService('gameVerService','listsNoPageBySeries',_series);
						
						cversionAmf = new Amf;
						cversionAmf.registerCallBack(setCVersion);
						cversionAmf.startService('gameCVerService','listsNoPageBySeries',_series);
			}
			
			public function initDataGrid(evt:AppEvent):void{
				var result:ArrayCollection
				if(amf != null){
					result = new ArrayCollection(amf.getResult() as Array);
				}
				else if(sb.amf != null)
					result = new ArrayCollection(sb.amf.getResult() as Array);
				
				cd.initData(result);
				amf = null;
			}
			
			private function initColumns():void{
				if(!columsInited){
					var col1:DataGridColumn = new DataGridColumn();
					col1.dataField = 'id';
					col1.headerText = 'ID';
					col1.width = 100;
					
					var col2:DataGridColumn = new DataGridColumn();
					col2.dataField = 'buissnesser';
					col2.headerText = '运营商';
					col2.width = 200;
					
					var col3:DataGridColumn = new DataGridColumn();
					col3.dataField = 'name';
					col3.headerText = '服务器';
					col3.width = 200;
					
					var col4:DataGridColumn = new DataGridColumn();
					col4.dataField = 'ip';
					col4.headerText = 'IP';
					col4.width = 200;
					
					var col5:DataGridColumn = new DataGridColumn();
					col5.dataField = 'port';
					col5.headerText = '端口';
					col5.width = 100;
					
					var col6:DataGridColumn = new DataGridColumn();
					col6.dataField = 'dynamic_dbname';
					col6.headerText = '动态数据库名';
					col6.width = 200;
					
					var col7:DataGridColumn = new DataGridColumn();
					col7.dataField = 'version';
					col7.headerText = '服务端版本';
					col7.width = 200;
					col7.itemRenderer = new ClassFactory(ColorLabel);
					
					var col9:DataGridColumn = new DataGridColumn();
					col9.dataField = 'cversion';
					col9.headerText = '客户端版本';
					col9.width = 200;
					col9.itemRenderer = new ClassFactory(ColorLabel);
					
					
					var col8:DataGridColumn = new DataGridColumn();
					col8.dataField = 'stat';
					col8.headerText = '游戏服务状态';
					col8.width = 100;
					
					
					cd.dg.columns = cd.dg.columns.concat(new Array(col1,col2,col3,col4,col5,col6,col7,col9,col8));
					columsInited = true;
				}
			}
			
			private function buissnesserChooser():void{
				var bc : Buissnesser_List = new Buissnesser_List();
				bc.addEventListener(AppEvent.BUISSNESSER_CHOOSER_ONLY_COMPLETE,EventDelegate.createWithoutEvent(setbuissnesser,bc));
				bc.width = 400;
				bc.height = 500;
				XWindow.getInstance().addWindow(bc,this).show();
			}
			
			private function setbuissnesser(bc:Buissnesser_List):void{
					bc.removeEventListener(AppEvent.BUISSNESSER_CHOOSER_ONLY_COMPLETE,setbuissnesser);
					this.buissnesser = bc.buissnesser;
					bc.close();
					this.buissnesser_text.text = buissnesser.name;
			}
			
			
			private function initSubpage():void{
				sb.service = 'serverToolService';
				sb.method = 'lists';
				sb.methodTotal = 'num_rows';
				sb.container = this;
				sb.condition = this.getCondition();
				if(!sb.is_total_exec)
				sb.initTotal();				
			}
			
			private function getCondition():Object{
				    var condition : Object = new Object;
					if(buissnesser.hasOwnProperty('id'))condition.bid = buissnesser.id;
					if(this.cb_series.selectedItem && this.cb_series.selectedItem.id != '')condition.series = this.cb_series.selectedItem.id;
					if(this.cb_version.selectedItem && this.cb_version.selectedItem.id != '')condition.version = this.cb_version.selectedItem.id;
					if(this.cb_cversion.selectedItem && this.cb_cversion.selectedItem.id != '')condition.cversion = this.cb_cversion.selectedItem.id;
					return condition;
			}
			
			private function search():void{
				amf = new Amf();
				amf.registerCallBack(initDataGrid);
				amf.startService('serverToolService','lists',new Pagelimit(0,AppConfig.PAGECOUNT),this.getCondition());
				sb.is_total_exec = false;
				initSubpage();
			}
			
			
			public function uncheckAll():void{
				for each(var item : Object in this.cd.selecteditems){
					   item._select = false;
				}
				(this.cd.dg.dataProvider as ArrayCollection).refresh();
				this.cd.selecteditem = null;
				this.cd.selecteditems = null;
			}
			
			
			private function createUpdateWindow():void{
				var columns:Array = [];
				var columns_properties:Array = [
					{dataField:"seriesname",headerText:"系列",width:""},
					{dataField:"version",headerText:"版本",width:""}
				]
				
				for(var i:int = 0 ; i< columns_properties.length; i++){
					var  column : GridColumn = new GridColumn;
					column.dataField = columns_properties[i].dataField;
					column.headerText = columns_properties[i].headerText;
					if(columns_properties[i].width>1)column.width = columns_properties[i].width;
					
					//labelFunction
					/*if(column.dataField == 'sex'){
						column.labelFunction = function(object:Object,grid:GridColumn):String{
							if(object.sex == 0)return '/';
							else if(object.sex==1) return '男';
							else return '女';
						}
					}*/
					
					//itemRenderer
					/*if(column.dataField == 'name' || column.dataField == 'loginname'){
						var  factory:ClassFactory = new ClassFactory(SColorLabel);
						factory.properties = {color:Color.purple};
						column.itemRenderer = factory;
					}*/
					
					columns.push(column);
				}
				
			    updateWindow  = new DG_Window();
				updateWindow.width = 400;
				updateWindow.height = 500;
				XWindow.getInstance().addWindow(updateWindow,this).show();
				updateWindow.initColumns(columns);
				updateWindow.tw.title = "服务端版本更新";
				updateWindow.btn_send.addEventListener(MouseEvent.CLICK,this.confirmUpdateConfirm);
				
				updateAmf = new Amf;
				updateAmf.registerCallBack(showUpdateVersions);
				updateAmf.startService('gameVerService','listsNoPageBySeriesAndVersion',this.cd.selecteditem.gameseries,this.cd.selecteditem.gamever);
			}
			
			private function showUpdateVersions(e:AppEvent):void{
				updateWindow.initData(new ArrayCollection(updateAmf.getResult() as Array));
			}
			
			
			private function createRollBackWindow():void{
				var columns:Array = [];
				var columns_properties:Array = [
					{dataField:"time",headerText:"时间",width:""}
				]
				
				for(var i:int = 0 ; i< columns_properties.length; i++){
					var  column : GridColumn = new GridColumn;
					column.dataField = columns_properties[i].dataField;
					column.headerText = columns_properties[i].headerText;
					if(columns_properties[i].width>1)column.width = columns_properties[i].width;
					
					//labelFunction
					/*if(column.dataField == 'sex'){
					column.labelFunction = function(object:Object,grid:GridColumn):String{
					if(object.sex == 0)return '/';
					else if(object.sex==1) return '男';
					else return '女';
					}
					}*/
					
					//itemRenderer
					/*if(column.dataField == 'name' || column.dataField == 'loginname'){
					var  factory:ClassFactory = new ClassFactory(SColorLabel);
					factory.properties = {color:Color.purple};
					column.itemRenderer = factory;
					}*/
					
					columns.push(column);
				}
				
				rollbackWindow  = new DG_Window();
				rollbackWindow.width = 400;
				rollbackWindow.height = 500;
				XWindow.getInstance().addWindow(rollbackWindow,this).show();
				rollbackWindow.initColumns(columns);
				rollbackWindow.btn_send.addEventListener(MouseEvent.CLICK,this.confirmRollbackConfirm);
				
				rollbackAmf = new Amf;
				rollbackAmf.registerCallBack(showBackUpData);
				rollbackAmf.startService('serverToolService','getBackUpData',this.cd.selecteditem.id);
			}
			
			private function showBackUpData(e:AppEvent):void{
				rollbackWindow.initData(new ArrayCollection(rollbackAmf.getResult() as Array));
			}
			
			private function createMergeWindow():void{
				mergeWindow  = new MergeServersChooser();
				mergeWindow.width = 900;
				mergeWindow.height = 600;
				XWindow.getInstance().addWindow(mergeWindow,this).show();
				mergeWindow.currentMainElement = this;
				mergeWindow.to_server_id = this.cd.selecteditem.id;
				mergeWindow.to_server_series = this.cd.selecteditem.gameseries;
				mergeWindow.to_server_version = this.cd.selecteditem.gamever;
				mergeWindow.to_server_cversion = this.cd.selecteditem.gamecver;
				mergeWindow.to_bid = this.cd.selecteditem.bid;
				mergeWindow.to_mergeid = this.cd.selecteditem.mergeid;
				mergeWindow.tw.title = "合服到"+this.cd.selecteditem.name;
				mergeWindow.init();
			}
			
			
			private function createCUpdateWindow():void{
				var columns:Array = [];
				var columns_properties:Array = [
					{dataField:"seriesname",headerText:"系列",width:""},
					{dataField:"version",headerText:"版本",width:""}
				]
				
				for(var i:int = 0 ; i< columns_properties.length; i++){
					var  column : GridColumn = new GridColumn;
					column.dataField = columns_properties[i].dataField;
					column.headerText = columns_properties[i].headerText;
					if(columns_properties[i].width>1)column.width = columns_properties[i].width;
					
					//labelFunction
					/*if(column.dataField == 'sex'){
					column.labelFunction = function(object:Object,grid:GridColumn):String{
					if(object.sex == 0)return '/';
					else if(object.sex==1) return '男';
					else return '女';
					}
					}*/
					
					//itemRenderer
					/*if(column.dataField == 'name' || column.dataField == 'loginname'){
					var  factory:ClassFactory = new ClassFactory(SColorLabel);
					factory.properties = {color:Color.purple};
					column.itemRenderer = factory;
					}*/
					
					columns.push(column);
				}
				
				updateWindow  = new DG_Window();
				updateWindow.width = 400;
				updateWindow.height = 500;
				XWindow.getInstance().addWindow(updateWindow,this).show();
				updateWindow.initColumns(columns);
				updateWindow.tw.title = "客户端版本更新";
				updateWindow.btn_send.addEventListener(MouseEvent.CLICK,this.confirmCUpdateConfirm);
				
				cupdateAmf = new Amf;
				cupdateAmf.registerCallBack(showCUpdateVersions);
				cupdateAmf.startService('gameCVerService','listsNoPageBySeriesAndVersion',this.cd.selecteditem.gameseries,this.cd.selecteditem.gamecver);
			}
			
			
			private function showCUpdateVersions(evt:AppEvent):void{
				updateWindow.initData(new ArrayCollection(cupdateAmf.getResult() as Array));
			}
			
			/*================================ 服务器操作 ============================*/
			
			
			/*=========开启=========*/
			private function confirmOpen():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				Message.confirm("确认要开启吗?",this,function():void{
					var ids : String = '';
					for each(var item:Object in cd.selecteditems){
						operated_serverids.addItem(item);
						ids += item.id+',';
					}
					ids = ids.substr(0,ids.length-1);
					amf = new Amf();
					amf.registerCallBack(confirmOpenHandler);
					amf.startService('serverToolService','op_open',ids,AppConfig.admin);
				});
			}
			
			private function confirmOpenHandler(evt:AppEvent):void{
				        this.uncheckAll();
						this.disabledBtnGroupInit();
						var result:Object = amf.getResult() as Object;
						if(result.failed_serverids.toString() == ''){
							var success_serverids:Array = result.success_serverids.toString().split(',');
							for each(var item:Object in this.cd.dg.dataProvider){
								for each(var sid:String in  success_serverids){
									if(item.id.toString() == sid){
										item.stat = '开启';
									}
								}
							}
							
							(this.cd.dg.dataProvider as ArrayCollection).refresh();
							Alert.show('[开启游戏服务]处理成功');
						}else{
							if(result.success_serverids.toString() != ''){
							    success_serverids = result.success_serverids.toString().split(',');
								for each(item in this.cd.dg.dataProvider){
									for each(sid in  success_serverids){
										if(item.id.toString() == sid){
											item.stat = '开启';
										}
									}
								}
								(this.cd.dg.dataProvider as ArrayCollection).refresh();
							}
							
						    var message : String = '[开启]处理失败的服务器:'+ result.failed_servernames;
							Alert.show(message);
						}
			}
			
			
			/*=========停止=========*/
			private function confirmStop():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				Message.confirm("确认要停止吗?",this,function():void{
					var ids : String = '';
					for each(var item:Object in cd.selecteditems){
						operated_serverids.addItem(item);
						ids += item.id+',';
					}
					ids = ids.substr(0,ids.length-1);
					amf = new Amf();
					amf.registerCallBack(confirmStopHandler);
					amf.startService('serverToolService','op_stop',ids,AppConfig.admin);
				});
			}
			
			private function confirmStopHandler(evt:AppEvent):void{
				this.uncheckAll();
				this.disabledBtnGroupInit();
				var result:Object = amf.getResult() as Object;
				if(result.failed_serverids.toString() == ''){
					var success_serverids:Array = result.success_serverids.toString().split(',');
					for each(var item:Object in this.cd.dg.dataProvider){
						  for each(var sid:String in success_serverids){
							   if(item.id.toString() == sid){
								    item.stat = '关闭';
							   }
						  }
					}
					
					(this.cd.dg.dataProvider as ArrayCollection).refresh();
					Alert.show("[停止]操作成功");
					return;
				}else{
					if(result.success_serverids.toString() != ''){
						success_serverids = result.success_serverids.toString().split(',');
						for each(item in this.cd.dg.dataProvider){
							for each(sid in  success_serverids){
								if(item.id.toString() == sid){
									item.stat = '关闭';
								}
							}
						}
						(this.cd.dg.dataProvider as ArrayCollection).refresh();
					}
					
					var message : String = '[停止]处理失败的服务器:'+ result.failed_servernames;
					Alert.show(message);
				}
			}
			
			
			/*=========重启=========*/
			private function confirmReboot():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				Message.confirm("确认要重启吗?",this,function():void{
					var ids : String = '';
					for each(var item:Object in cd.selecteditems){
						ids += item.id+',';
					}
					ids = ids.substr(0,ids.length-1);
					amf = new Amf();
					amf.registerCallBack(confirmRebootHandler);
					amf.startService('serverToolService','op_reboot',ids,AppConfig.admin);
				});
			}
			
			private function confirmRebootHandler(evt:AppEvent):void{
				this.uncheckAll();
				this.disabledBtnGroupInit();
				var result:Object = amf.getResult() as Object;
				if(result.failed_serverids.toString() == ''){
					Alert.show("[重启]操作成功");
				}else{
					var message : String = '[重启]处理失败的服务器:'+ result.failed_servernames;
					Alert.show(message);
				}
			}
			
			
			/*=========更新=========*/
			private function confirmUpdate():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				this.createUpdateWindow();
			}
			
			private function confirmUpdateConfirm(e:MouseEvent):void{
							if(this.cd.selecteditem == null)return;
							var server_id : String = this.cd.selecteditem.id;
							var version : Object = new Object();
							version.id = updateWindow.dg.selectedItem.id;
							version.seriesname = updateWindow.dg.selectedItem.seriesname;
							version.version = updateWindow.dg.selectedItem.version;
						
							Message.confirm("确认要更新到"+version.version+"吗?",this,function():void{
							amf = new Amf();
							amf.registerCallBack(confirmUpdateHandler);
							amf.startService('serverToolService','op_updateVer',server_id,AppConfig.admin,version);
				});
			}
			
			private function confirmUpdateHandler(evt:AppEvent):void{
				this.uncheckAll();
				this.disabledBtnGroupInit();
				var result:Object = amf.getResult() as Object;
				
				if(result.state == -2){
					Alert.show('系统有进程正在进行中,请稍后操作');
					return;
				}
				
				if(result.failed_serverids == '' || result.failed_serverids == null){
					Alert.show('[更新]操作成功,具体信息请参看系统日志');
				}else{
					Alert.show('[更新]操作失败');
				}
				PopUpManager.removePopUp(updateWindow);
			}
			
			
			/*=========合服=========*/
			private function confirmMerge():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				this.createMergeWindow();
			}
			
			
			/*=========回档=========*/
			private function confirmRollback():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				this.createRollBackWindow();
			}
			
			
			private function confirmRollbackConfirm(e:MouseEvent):void{
					if(this.cd.selecteditem == null) return;
					var server_id : String =  this.cd.selecteditem.id;
					var backUp_id : String = rollbackWindow.dg.selectedItem.id;
					var date:String = rollbackWindow.dg.selectedItem.time;
					Message.confirm("确认要回档到"+date+"吗?",this,function():void{
						amf = new Amf();
						amf.registerCallBack(confirmRollbackHandler);
						amf.startService('serverToolService','op_rollback',server_id,backUp_id,AppConfig.admin);
					});
			}
			
			private function confirmRollbackHandler(e:AppEvent):void{
				this.uncheckAll();
				this.disabledBtnGroupInit();
				var result:Object = amf.getResult() as Object;
				
				if(result.state == -2){
					Alert.show('系统有进程正在进行中,请稍后操作');
					return;
				}
				
				if(result== null || result.failed_serverids == '' || result.failed_serverids == null){
					Alert.show('[回档]操作成功,具体信息请参看系统日志');
				}else{
					Alert.show('[回档]操作失败');
				}
				PopUpManager.removePopUp(rollbackWindow);
			}
			
			/*=========清档=========*/
			private function confirmClear():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				
				Message.confirm("确认要清档吗?",this,function():void{
					var ids : String = '';
					for each(var item:Object in cd.selecteditems){
						ids += item.id+',';
					}
					ids = ids.substr(0,ids.length-1);
					amf = new Amf();
					amf.registerCallBack(confirmClearHandler);
					amf.startService('serverToolService','op_clear',ids,AppConfig.admin);
				});
			}
			
			private function confirmClearHandler(evt:AppEvent):void{
					this.uncheckAll();
					this.disabledBtnGroupInit();
				   var result:Object = amf.getResult() as Object;
				   
				   if(result.state == -2){
					   Alert.show('系统有进程正在进行中,请稍后操作');
					   return;
				   }
				   
				   if(result.failed_serverids == '' || result.failed_serverids == null){
					   Alert.show('[清档]操作成功,具体信息请参看系统日志');
				   }else{
					   Alert.show('[清档]操作失败');
				   }
			}
			
			private function confirmCUpdate():void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要操作的项');return;
				}
				this.createCUpdateWindow();
			}
			
			private function confirmCUpdateConfirm(e:MouseEvent):void{
				if(this.cd.selecteditem == null)return;
				var server_id : String = this.cd.selecteditem.id;
				var version : Object = new Object();
				version.id = updateWindow.dg.selectedItem.id;
				version.seriesname = updateWindow.dg.selectedItem.seriesname;
				version.version = updateWindow.dg.selectedItem.version;
				
				Message.confirm("确认要更新到"+version.version+"吗?",this,function():void{
					amf = new Amf();
					amf.registerCallBack(confirmCUpdateHandler);
					amf.startService('serverToolService','op_updateCVer',server_id,AppConfig.admin,version);
				});
			}
			
			private function confirmCUpdateHandler(evt:AppEvent):void{
				this.uncheckAll();
				this.disabledBtnGroupInit();
				var result:Object = amf.getResult() as Object;
				
				if(result.state == -2){
					Alert.show('系统有进程正在进行中,请稍后操作');
					return;
				}
				
				if(result.failed_serverids == '' || result.failed_serverids == null){
					Alert.show('[更新客户端]操作成功,具体信息请参看系统日志');
				}else{
					Alert.show('[更新客户端]操作失败');
				}
				PopUpManager.removePopUp(updateWindow);
			}
			
			private function operationClick(evt:ItemClickEvent):void{
				switch(evt.index){
					 case 0:  this.search();break;
					 case 1:  this.confirmOpen();break;
					 case 2: this.confirmStop();break;
					 case 3: this.confirmReboot();break;
					 case 4:	 this.confirmUpdate();break;
					 case 5: this.confirmMerge();break;
					 case 6: this.confirmRollback();break;
					 case 7:	  this.confirmClear();break;
					 case 8: this.confirmCUpdate();break;
				}
			}
			
		]]>
	</fx:Script>
	<s:Panel x="0" y="0" width="100%" height="100%">
		<component:Search x="0" top="0">
		</component:Search>
		<component:CB_Datagrid id="cd" x="0" height="85%" verticalCenter="18">
		</component:CB_Datagrid>
		<component:Subpages id="sb" x="0" bottom="0">
		</component:Subpages>
		
		<mx:LinkBar borderStyle="solid" right="2" top="2" itemClick="operationClick(event)" id="lb">
			<mx:dataProvider>
				<fx:String>查询</fx:String>
				<fx:String>开启</fx:String>
				<fx:String>停止</fx:String>
				<fx:String>重启</fx:String>
				<fx:String>服务端版本更新</fx:String>
				<fx:String>合服</fx:String>
				<fx:String>回档</fx:String>
				<fx:String>清档</fx:String>
				<fx:String>客户端版本更新</fx:String>
			</mx:dataProvider>  
		</mx:LinkBar>
		<s:Form x="0" y="0" width="65%" height="10%">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<s:FormItem x="0" y="-10" width="104" height="31" label="运营商">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<mx:LinkButton id="btn_browser" x="0" y="-15" label="浏  览"
							   click="buissnesserChooser()" color="#114DE4" fontStyle="italic"
							   textDecoration="underline"/>
			</s:FormItem>
			<s:FormItem x="112" y="-10" width="182" height="30" label="已经选择">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<s:Label id="buissnesser_text" x="1" y="0" width="103" height="17" color="#9600FF"
						 fontWeight="bold" text="全部"/>
			</s:FormItem>
			<s:FormItem x="-1" y="24" width="593" height="30" label="系列">
				<s:layout>
					<s:BasicLayout/>
				</s:layout>
				<mx:ComboBox id="cb_series" x="6" y="-12" width="119" change="loadversions()"/>
				<mx:ComboBox id="cb_version" x="210" y="-12" width="119"/>
				<mx:ComboBox id="cb_cversion" x="405" y="-13" width="119"/>
				<s:Label x="335" y="-8" text="客户端版本"/>
				<s:Label x="138" y="-8" text="服务端版本"/>
			</s:FormItem>
		</s:Form>
	</s:Panel>
</s:Module>
