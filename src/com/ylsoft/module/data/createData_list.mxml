<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:component="com.ylsoft.component.*" xmlns:chart="com.ylsoft.chart.*"
		  width="100%" height="100%" creationComplete="init()">
	<!--注册创建图表-->
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:WipeRight duration="3000" id="wipe" />
	</fx:Declarations>
	<fx:Style>
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|LineChart {
			fontFamily: myChartFont;
			fontSize: 12;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.ylsoft.chart.ChartDrag;
			import com.ylsoft.chart.ChartZoom;
			import com.ylsoft.common.ComponentExportImage;
			import com.ylsoft.common.Message;
			import com.ylsoft.common.Pagelimit;
			import com.ylsoft.common.Toolkit;
			import com.ylsoft.common.XWindow;
			import com.ylsoft.component.BuissnesserChooserMuti;
			import com.ylsoft.core.Amf;
			import com.ylsoft.core.AppConfig;
			import com.ylsoft.core.ModuleFactory;
			import com.ylsoft.core.ModuleGlobal;
			import com.ylsoft.core.UIProgressBar;
			import com.ylsoft.event.AppEvent;
			
			import mx.charts.AxisRenderer;
			import mx.charts.chartClasses.IAxis;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.effects.WipeRight;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.effects.Wipe;
			private var amf:Amf;
			private var _amf:Amf;
			public var servers:ArrayCollection = new ArrayCollection;
			private var _total:Object = new Object;
			private var _dateformat:DateFormatter = new DateFormatter();
			private var _totalData:ArrayCollection;
			private var chartZoom:ChartZoom = new ChartZoom;
			
			private function init():void{
				//禁用返回列表
				FlexGlobals.topLevelApplication.form_return.enabled=false;
				_dateformat.formatString = 'YYYY-MM-DD';
				this.addEventListener(AppEvent.BUISSNESSER_CHOOSE_COMPLETE,buissnessChooseComplete);
				this.timediff.dataProvider = new ArrayCollection([{name:"所有",value:1},{name:"24小时",value:2}]);
				this.timediff.labelField = 'name';
			}
			
			
			private function buissnesserChooser():void{
				var bc : BuissnesserChooserMuti = new BuissnesserChooserMuti();
				bc.width = 800;
				bc.height = 400;
				XWindow.getInstance().addWindow(bc,this).show();
			}
			
			private function getCondition():Object{
				var condition : Object = new Object();
				condition.starttime = this.starttime.text;
				condition.endtime = this.endtime.text;
				var _server_ids:String = '';
				for each(var obj:Object in this.servers){
					_server_ids += obj.id + ',';
				}
				_server_ids = _server_ids.substr(0,_server_ids.length-1);
				condition.server_ids = _server_ids;
				condition.timediff = this.timediff.selectedItem.value;
				return condition;
			}
			
			private function doSearch():void{
				this.linechart.dataProvider = null;
				this.registernum.visible = false;//必须将visible设为由false转为true 才能触发showeffect 效果
				this.createnum.visible = false;
				var condition:Object = getCondition();
				amf = new Amf;
				amf.setFaultMessage("通信失败");
				amf.registerCallBack(initChart);
				amf.startService('createDataService','lists',condition);
			}
			
			private function initChart(evt:AppEvent):void{
				this._totalData = new ArrayCollection(amf.getResult() as Array);
				this.linechart.dataProvider = _totalData;
				chartZoom.init(this.linechart);
				this.registernum.visible = true;
				this.createnum.visible = true;
				FlexGlobals.topLevelApplication.dispatchEvent(new AppEvent(AppEvent.COMPONENT_EXPORT_IMAGE_READY));
			}
			
			private function checkServerChooser(evt:Event):void{
				if(this.servers.length == 0 || this.starttime.text == '' || this.endtime.text == '')
					this.search_btn.enabled = false;
				else{
					var parttern : RegExp = /-|:/g;
					var startdate:String = this.starttime.text.replace(parttern,'');
					var enddate : String = this.endtime.text.replace(parttern,'');
					if(int(startdate) > int(enddate)){
						Alert.show('起始日期不能大于结束日期');
						this.search_btn.enabled = false;return;
					}
					
					this.search_btn.enabled = true;
				}
			}
			
			private function search_today():void{
				var today:String = this._dateformat.format(new Date);
				this.starttime.text = today;
				this.endtime.text = today;
				this.search_btn.enabled = true;
				this.search_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			private function search_seven():void{
				var oneday : Number = 60 * 60 * 24 *1000;
				var datenow:Date = new Date();
				var enddate: String = this._dateformat.format(datenow);
				var startdate : String = this._dateformat.format(new Date(datenow.time - 7*oneday));
				this.starttime.text = startdate;
				this.endtime.text = enddate;
				this.search_btn.enabled = true;
				this.search_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			private function buissnessChooseComplete(evt:AppEvent):void{
				var starttime:String = this.starttime.text;
				var endtime:String = this.endtime.text;
				if(starttime!='' && endtime !='' && this.servers.length >0){
					this.search_btn.enabled = true;
					this.today_btn.enabled = true;
					this.seven_btn.enabled = true;
				}else if(this.servers.length > 0){
					this.today_btn.enabled = true;
					this.seven_btn.enabled = true;
				}
				else {
					this.search_btn.enabled = false;
					this.today_btn.enabled = false;
					this.seven_btn.enabled = false;
				}
			}
			
			public function parseDate(s:String):Date{//渲染数据的时候的时间转换函数
				//1先判断是不是datetime
				if(s.indexOf('|') == -1){//不含时分秒的
					var dateArray : Array = s.split('-');
					return new Date(dateArray[0],dateArray[1]-1,dateArray[2]);
				}else{
					dateArray = s.split('|');
					return new Date(dateArray[0],dateArray[1]-1,dateArray[2],dateArray[3],dateArray[4],dateArray[5]);
				}
			}
			
			private function linedetail(item:Object,pvalue:Object,axis:IAxis):String{//为了精确到时分秒
				if(timediff.selectedItem==null)return '';
				if(timediff.selectedItem.value == 1){
					var dateformat : DateFormatter = new DateFormatter;
					dateformat.formatString = 'YYYY-MM-DD JJ:NN:SS';
				}else{
					dateformat  = new DateFormatter;
					dateformat.formatString = 'YYYY-MM-DD';
				}
				return dateformat.format(item);
			}
			
			public function exportComponentImage(evt:AppEvent):void{
				ComponentExportImage.getInstance().ui_target = this.main_panel;
				ComponentExportImage.getInstance().save_name = "注册创建";
				FlexGlobals.topLevelApplication.btn_component_image_export.enabled = true;
			}
			
		]]>
	</fx:Script>
		<s:Panel width="100%" height="100%" dropShadowVisible="true" title="注册创建" id="main_panel">
		<component:Search x="0" top="0">
		</component:Search>
		<s:HGroup right="2" top="2" width="300">
			<s:Button id="search_btn"  label="查询" click="doSearch()" enabled="false" buttonMode="true"/>
			<s:Button  label="选择运营商和服务器" click="buissnesserChooser()" buttonMode="true"/>
		</s:HGroup>
		<mx:DateField x="129" y="2" width="155" buttonMode="true" yearNavigationEnabled="true" id="starttime" change="checkServerChooser(event)"  monthNames="[一月,二月,三月,四月,五月,六月,七月,八月,九月,十月,十一月,十二月]"  dayNames="[日,一,二,三,四,五,六]"  formatString="YYYY-MM-DD"/>
		<mx:DateField x="129" y="29" width="155" buttonMode="true" yearNavigationEnabled="true" id="endtime"  change="checkServerChooser(event)" monthNames="[一月,二月,三月,四月,五月,六月,七月,八月,九月,十月,十一月,十二月]"  dayNames="[日,一,二,三,四,五,六]" formatString="YYYY-MM-DD"/>
		<s:Label x="97" y="7" text="开始" />
		<s:Label x="97" y="34" text="结束"/>
		<mx:LinkButton x="10" y="4" label="今天" enabled="false" id="today_btn" click = "search_today()"/>
		<mx:LinkButton x="10" y="30" label="最近7天" enabled="false" id="seven_btn" click = "search_seven()"/>
		<s:HGroup y="34" right="0" width="302">
			<s:Label  fontWeight="bold" text="已选择"/>
			<s:Label id="servercount"  color="#FE0000" fontWeight="bold" text="0"/>
			<s:Label  fontWeight="bold" text="台服务器"/>
		</s:HGroup>
		<mx:LineChart buttonMode="true" id="linechart" x="0" y="54" showDataTips="true" width="100%" height="85%" scaleX="0.8" scaleY="0.8" seriesFilters="[]" >
			<mx:horizontalAxis>
				<mx:DateTimeAxis id="cdate" parseFunction="parseDate"  labelFunction="linedetail" dataUnits="minutes"
								 alignLabelsToUnits="false"/>
			</mx:horizontalAxis>
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer  axis="{cdate}" id="axisRender"   labelRotation="65" />
			</mx:horizontalAxisRenderers>
			
			
			<mx:verticalAxis>
				<mx:LinearAxis title="人数"  baseAtZero="true" displayName="人数"/>
			</mx:verticalAxis>
			<mx:series>
				<chart:ChartLineSeries displayName="注册" yField="registernum" xField="date"  id="registernum" showEffect="{wipe}" />
				<chart:ChartLineSeries displayName="创建" yField="createnum" xField="date" id="createnum"  showEffect="{wipe}"  />
			</mx:series>
		</mx:LineChart>
		<mx:Legend left="10" bottom="10" width="100%" height="25"  dataProvider="{linechart}"/>
		<s:Label x="292" y="8" text="时间间隔"/>
		<mx:ComboBox id="timediff" x="348" y="1" width="100" height="25" />
	</s:Panel>	
</s:Module>
