<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:component="com.ylsoft.component.*"
		  width="100%" height="100%" creationComplete="init()">
	<!--邮件列表-->
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.ylsoft.common.Message;
			import com.ylsoft.common.Msg_ServerCode;
			import com.ylsoft.common.Pagelimit;
			import com.ylsoft.common.SocketListener;
			import com.ylsoft.common.Toolkit;
			import com.ylsoft.common.XWindow;
			import com.ylsoft.component.BuissnesserChooserMuti;
			import com.ylsoft.component.BuissnesserChooserSingle;
			import com.ylsoft.component.special.MailDetail;
			import com.ylsoft.component.special.PlayerDetail;
			import com.ylsoft.core.Amf;
			import com.ylsoft.core.AppConfig;
			import com.ylsoft.core.ModuleFactory;
			import com.ylsoft.core.ModuleGlobal;
			import com.ylsoft.core.SocketService;
			import com.ylsoft.core.UIProgressBar;
			import com.ylsoft.event.AppEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import ronco.base.NetCore31;
			import ronco.bbxq.ObjAni;
			private var amf:Amf;
			private var _amf:Amf;
			private var detail_amf:Amf;
			public var servers:ArrayCollection = new ArrayCollection;
			private var _total:Object = new Object;
			private var columsInited:Boolean = false;
			private var detailContent:String;
			
			private function init():void{
				//禁用返回列表
				FlexGlobals.topLevelApplication.form_return.enabled=false;
				initColumns();
				
				//监听运营商服务器选择事件
				this.addEventListener(AppEvent.BUISSNESSER_CHOOSE_COMPLETE,buissnesserChooserComplete);
				this.cd.dg.addEventListener(ListEvent.ITEM_DOUBLE_CLICK,showDetail);
			}
			
			public function initDataGrid(evt:AppEvent):void{
				var result:ArrayCollection
				if(amf != null){
					result = new ArrayCollection(amf.getResult() as Array);
				}
				else if(sb.amf != null)
					result = new ArrayCollection(sb.amf.getResult() as Array);
				
				cd.initData(result);
				initSubpage();
				amf = null;
			}
			
			private function initColumns():void{
				if(!columsInited){
					var col2:DataGridColumn = new DataGridColumn();
					col2.dataField = 'title';
					col2.headerText = '标题';
					
					var col3:DataGridColumn = new DataGridColumn();
					col3.dataField = 'dtime';
					col3.headerText = '时间';
					
					var col4:DataGridColumn = new DataGridColumn();
					col4.dataField = 'itemname';
					col4.headerText = '物品';
					
					var col5:DataGridColumn = new DataGridColumn();
					col5.dataField = 'itemnum';
					col5.headerText = '数量';
					
					var col6:DataGridColumn = new DataGridColumn();
					col6.dataField = 'server_name';
					col6.headerText = '服务器';
					
					var col7:DataGridColumn = new DataGridColumn();
					col7.dataField = 'flagname';
					col7.headerText = '操作人';
					
					cd.dg.columns = cd.dg.columns.concat(new Array(col2,col3,col4,col5,col6,col7));
					columsInited = true;
				}
			}
			
			
			private function initSubpage():void{
				sb.service = 'mailService';
				sb.method = 'lists';
				sb.methodTotal = 'num_rows';
				sb.container = this;
				sb.condition = getCondition();
				sb.initTotal();				
			}
			
			private function getCondition():Object{
				var condition : Object = new Object();
				condition.servers = this.servers.source;
				return condition;
			}
			
			private function doSearch():void{
				this.sb.is_total_exec = false;
				amf = new Amf();
				amf.setFaultMessage("通信失败");
				amf.registerCallBack(initDataGrid);
				amf.startService('mailService','lists',new Pagelimit(0,AppConfig.PAGECOUNT),getCondition());
			}
			
			private function addMail(evt:MouseEvent):void{
				FlexGlobals.topLevelApplication.main_right.removeAllElements();
				ModuleGlobal.Modulefactory_main = new ModuleFactory();
				ModuleGlobal.Modulefactory_main.setProgress(UIProgressBar.getInstance());
				ModuleGlobal.Modulefactory_main.loadModule('sys/mail_add',FlexGlobals.topLevelApplication.main_right);
				ModuleGlobal.Modulefactory_pre_unload = new Array(ModuleGlobal.Modulefactory_main);
				AppConfig.formoperation = AppConfig.FORMADD;
			}
			
			
			private function delNotice(evt:MouseEvent):void{
				if(this.cd.selecteditems.length == 0){
					Alert.show('请勾选要删除的项');return;
				}
				
				Message.confirm("确认要删除吗?",this,function():void{
					var notices:ArrayCollection = new ArrayCollection;
					var notice:Object;
					for each(var item:Object in cd.selecteditems){
						notice = new Object;
						notice.id = item.id;
						notice.server = Toolkit.getObjectFromCollectionByProperty('name',item.servername,servers);
						notices.addItem(notice);
					}
					
					amf = new Amf();
					amf.registerCallBack(delComplete);
					amf.startService('mailService','del',notices.toArray());
				});
			}
			
			private function delComplete(evt:AppEvent):void{
				this.sb.is_total_exec = false;
				var result:Boolean = amf.getResult() as Boolean;
				amf = null;
				if(result){
					this.sb._first.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				}
				else
					Alert.show("删除出错");
			}
			
			private function buissnesserChooser():void{
				var bc : BuissnesserChooserMuti = new BuissnesserChooserMuti();
				bc.width = 800;
				bc.height = 400;
				XWindow.getInstance().addWindow(bc,this).show();
			}
			
			private function buissnesserChooserComplete(evt:AppEvent):void{
				if(this.servers.length > 0){
					this.search_btn.enabled = true;
					return;
				}
				this.search_btn.enabled = false;
			}
			
			private function showDetail(evt:ListEvent):void{
				var obj:Object = this.cd.dg.selectedItem;
				this.detailContent = obj.content;
				
				
				if(obj.type == 2){
					amf = new Amf;
					amf.setFaultMessage('无法取得详细信息');
					amf.registerCallBack(detailhandler);
					amf.startService('mailService','mailPlayers',obj.server,obj.id);
				}else{
					var md : MailDetail = new MailDetail();
					md.width = 800;
					md.height = 400;
					PopUpManager.addPopUp(md,this,true);
					PopUpManager.centerPopUp(md);
					md.playerlist.text = obj.server_name;
					md.content.text = this.detailContent;
					md.tw.title="邮件详情";
				}
			}
			
			private function detailhandler(evt:AppEvent):void{
				var list : ArrayCollection = new ArrayCollection(amf.getResult() as Array);
				if(list.length > 0){
					var playerlist:String = '';
					for each(var player:Object in list){
						playerlist += player.playername + ',';
					}
					
					var md : MailDetail = new MailDetail();
					md.width = 800;
					md.height = 400;
					PopUpManager.addPopUp(md,this,true);
					PopUpManager.centerPopUp(md);
					md.playerlist.text = playerlist;
					md.content.text = this.detailContent;
					md.tw.title="邮件详情";
				}
				amf = null;
			}
			
		]]>
	</fx:Script>
	<s:Panel width="100%" height="100%" dropShadowVisible="true" title="邮件列表">
		<component:Search x="0" top="0">
		</component:Search>
		<component:CB_Datagrid id="cd" left="0" height="86%" verticalCenter="15">
		</component:CB_Datagrid>
		<component:Subpages id="sb" x="0" bottom="0">
		</component:Subpages>
		<s:HGroup right="2" top="2" width="360">
			<s:Button id="search_btn"  label="查询" click="doSearch()" enabled="false" buttonMode="true"/>
			<s:Button  label="选择运营商和服务器" click="buissnesserChooser()" buttonMode="true"/>
			<s:Button label="添加" click="addMail(event)" buttonMode="true"/>
			<s:Button id="del_btn" label="删除" click="delNotice(event)" buttonMode="true"/>
		</s:HGroup>
		<s:HGroup y="34" right="0" width="302">
			<s:Label  fontWeight="bold" text="已选择"/>
			<s:Label id="servercount"  color="#FE0000" fontWeight="bold" text="0"/>
			<s:Label  fontWeight="bold" text="台服务器"/>
		</s:HGroup>
	</s:Panel>	
</s:Module>

